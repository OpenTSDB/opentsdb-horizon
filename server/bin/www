#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../index');
var debug = require('debug')('server:server');
var path = require('path');
var port;
var server;

if(process.env.SSL_CERTIFICATE_PATH &&
    process.env.SSL_PRIVATE_KEY_PATH
){
  var https = require('https');
  var fs = require('fs');
  port = process.env.PORT || 4443;
  /**
   * Get port from environment and store in Express.
   * */
  var privateKey = fs.readFileSync(path.resolve(process.env.SSL_PRIVATE_KEY_PATH), 'utf8');
  var certificate = fs.readFileSync(path.resolve(process.env.SSL_CERTIFICATE_PATH), 'utf8');
  var credentials = { key: privateKey, cert: certificate };
  app.set('port', port);
  /**
   * Create HTTPS server.
   */
  server = https.createServer(credentials, app);
}else{
  var http = require('http');
  port = process.env.PORT || 4080;
  app.set('port', port);
  /**
   * Create HTTP server.
   */
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
