@use 'sass:map';
@use 'sass:meta';
@use '@angular/material' as mat;
@import '../../loader-base';

@mixin _color($palette) {
    &.mat-radio-checked .mat-radio-outer-circle {
        border-color: mat-get-color-from-palette($palette);
    }

    .mat-radio-inner-circle,
    .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),
    &.mat-radio-checked .mat-radio-persistent-ripple,
    &:active .mat-radio-persistent-ripple {
        background-color: mat-get-color-from-palette($palette);
    }
}

@mixin color($config) {

    $primary: map.get($config, primary);
    $accent: map.get($config, accent);
    $warn: map.get($config, warn);
    $background: map.get($config, background);
    $foreground: map.get($config, foreground);

    .mat-radio-outer-circle {
        border-color: mat-get-color-from-palette($foreground, secondary-text);
    }

    .mat-radio-button {
        &.mat-primary {
            @include _color($primary);
        }

        &.mat-accent {
            @include _color($accent);
        }

        &.mat-warn {
            @include _color($warn);
        }

        // This needs extra specificity, because the classes above are combined
        // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.
        // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).
        &.mat-radio-disabled {

            &.mat-radio-checked .mat-radio-outer-circle,
            .mat-radio-outer-circle {
                border-color: mat-get-color-from-palette($foreground, disabled);
            }

            .mat-radio-ripple .mat-ripple-element,
            .mat-radio-inner-circle {
                background-color: mat-get-color-from-palette($foreground, disabled);
            }

            .mat-radio-label-content {
                color: mat-get-color-from-palette($foreground, disabled);
            }
        }

        // Switch this to a solid color since we're using `opacity`
        // to control how opaque the ripple should be.
        .mat-ripple-element {
            background-color: map.get($foreground, base);
        }
    }
}

@mixin theme($theme-name) {

    $light-theme: get-theme-light-variant($theme-name);
    $dark-theme: get-theme-dark-variant($theme-name);

    @at-root [theme="#{$theme-name}"] {
        &[variant="light"] {
            @include color($light-theme);
        }

        @if $dark-theme-selector {
            $mat-css-theme: $dark-theme !global;

            &[variant="dark"] {
                @include color($dark-theme);
            }
        }
    }

}
