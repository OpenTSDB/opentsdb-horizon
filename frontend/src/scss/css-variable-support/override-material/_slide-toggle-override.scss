@use 'sass:map';
@use 'sass:meta';
@use '@angular/material' as mat;
@import '../../loader-base';

@mixin _checked-color($palette, $thumb-checked-hue) {
    &.mat-checked {
        .mat-slide-toggle-thumb {
            background-color: mat-get-color-from-palette($palette, $thumb-checked-hue);
        }

        .mat-slide-toggle-bar {
            // Opacity is determined from the specs for the selection controls.
            // See: https://material.io/design/components/selection-controls.html#specs
            background-color: mat-get-color-from-palette($palette, $thumb-checked-hue, 0.54);
        }

        .mat-ripple-element {
            // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically
            // based on the type of interaction with the slide-toggle (e.g. for hover, focus)
            background-color: mat-get-color-from-palette($palette, $thumb-checked-hue);
        }
    }
}

@mixin color($config) {

    $is-dark: map.get($config, is-dark);
    $primary: map.get($config, primary);
    $accent: map.get($config, accent);
    $warn: map.get($config, warn);
    $background: map.get($config, background);
    $foreground: map.get($config, foreground);

    // Color hues are based on the specs which briefly show the hues that are applied to a switch.
    // The 2018 specs no longer describe how dark switches should look like. Due to the lack of
    // information for dark themed switches, we partially keep the old behavior that is based on
    // the previous specifications. For the checked color we always use the `default` hue because
    // that follows MDC and also makes it easier for people to create a custom theme without needing
    // to specify each hue individually.
    $thumb-unchecked-hue: if($is-dark, 400, 50);
    $thumb-checked-hue: default;

    $bar-unchecked-color: mat-get-color-from-palette($foreground, disabled);
    $ripple-unchecked-color: mat-get-color-from-palette($foreground, base);

    .mat-slide-toggle {
        @include _checked-color($accent, $thumb-checked-hue);

        &.mat-primary {
            @include _checked-color($primary, $thumb-checked-hue);
        }

        &.mat-warn {
            @include _checked-color($warn, $thumb-checked-hue);
        }

        &:not(.mat-checked) .mat-ripple-element {
            // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically
            // based on the type of interaction with the slide-toggle (e.g. for hover, focus)
            background-color: $ripple-unchecked-color;
        }
    }

    .mat-slide-toggle-thumb {
        background-color: mat-get-color-from-palette($denali-grey, $thumb-unchecked-hue);
    }

    .mat-slide-toggle-bar {
        background-color: $bar-unchecked-color;
    }
}

@mixin theme($theme-name) {

    $light-theme: get-theme-light-variant($theme-name);
    $dark-theme: get-theme-dark-variant($theme-name);

    @at-root [theme="#{$theme-name}"] {
        &[variant="light"] {
            @include color($light-theme);
        }

        @if $dark-theme-selector {
            $mat-css-theme: $dark-theme !global;

            &[variant="dark"] {
                @include color($dark-theme);
            }
        }
    }

}
