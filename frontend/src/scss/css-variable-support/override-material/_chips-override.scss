@use 'sass:map';
@use 'sass:meta';
@use '@angular/material' as mat;
@import '../../loader-base';

$chip-remove-font-size: 18px;

@mixin _element-color($foreground, $background) {
    background-color: $background;
    color: $foreground;

    .mat-chip-remove {
        color: $foreground;
        opacity: 0.4;
    }
}


// Applies the background color for a ripple element.
// If the color value provided is not a Sass color,
// we assume that we've been given a CSS variable.
// Since we can't perform alpha-blending on a CSS variable,
// we instead add the opacity directly to the ripple element.
@mixin _ripple-background($palette, $default-contrast, $opacity) {
    $background-color: mat-get-color-from-palette($palette, $default-contrast, $opacity);
    background-color: $background-color;

    @if (meta.type-of($background-color) !=color) {
        opacity: $opacity;
    }
}

@mixin _palette-styles($palette) {
    @include _element-color(mat-get-color-from-palette($palette, default-contrast),
        mat-get-color-from-palette($palette));

    .mat-ripple-element {
        @include _ripple-background($palette, default-contrast, 0.1);
    }
}

@mixin color($config-or-theme) {
    $config: mat-get-color-config($config-or-theme);
    $is-dark-theme: map.get($config, is-dark);
    $primary: map.get($config, primary);
    $accent: map.get($config, accent);
    $warn: map.get($config, warn);
    $background: map.get($config, background);
    $foreground: map.get($config, foreground);

    $unselected-background: mat-get-color-from-palette($background, unselected-chip);
    $unselected-foreground: mat-get-color-from-palette($foreground, text);

    .mat-chip.mat-standard-chip {
        @include _element-color($unselected-foreground, $unselected-background);

        &:not(.mat-chip-disabled) {
            .mat-chip-remove:hover {
                opacity: 0.54;
            }
        }

        &.mat-chip-disabled {
            opacity: 0.4;
        }

        &::after {
            background: map.get($foreground, base);
        }
    }

    .mat-chip.mat-standard-chip.mat-chip-selected {
        &.mat-primary {
            @include _palette-styles($primary);
        }

        &.mat-warn {
            @include _palette-styles($warn);
        }

        &.mat-accent {
            @include _palette-styles($accent);
        }
    }
}

@mixin theme($theme-name) {

    $light-theme: get-theme-light-variant($theme-name);
    $dark-theme: get-theme-dark-variant($theme-name);

    @at-root [theme="#{$theme-name}"] {
        &[variant="light"] {
            @include color($light-theme);
        }

        @if $dark-theme-selector {
            $mat-css-theme: $dark-theme !global;

            &[variant="dark"] {
                @include color($dark-theme);
            }
        }
    }

}
