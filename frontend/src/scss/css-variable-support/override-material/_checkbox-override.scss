@use 'sass:map';
@use 'sass:meta';
@use '@angular/material' as mat;
@import '../../loader-base';

@mixin color($config) {

    $is-dark-theme: map.get($config, is-dark);
    $primary: map.get($config, primary);
    $accent: map.get($config, accent);
    $warn: map.get($config, warn);
    $background: map.get($config, background);
    $foreground: map.get($config, foreground);

    // The color of the checkbox's checkmark / mixedmark.
    $checkbox-mark-color: mat-get-color-from-palette($background, background);

    // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,
    // this does not work well with elements layered on top of one another. To get around this we
    // blend the colors together based on the base color and the theme background.
    $white-30pct-opacity-on-dark: #686868;
    $black-26pct-opacity-on-light: #b0b0b0;
    $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);

    .mat-checkbox-frame {
      border-color: mat-get-color-from-palette($foreground, secondary-text);
    }

    .mat-checkbox-checkmark {
      fill: $checkbox-mark-color;
    }

    .mat-checkbox-checkmark-path {
      // !important is needed here because a stroke must be set as an
      // attribute on the SVG in order for line animation to work properly.
      stroke: $checkbox-mark-color !important;
    }

    .mat-checkbox-mixedmark {
      background-color: $checkbox-mark-color;
    }

    .mat-checkbox-indeterminate, .mat-checkbox-checked {
      &.mat-primary .mat-checkbox-background {
        background-color: mat-get-color-from-palette($primary);
      }

      &.mat-accent .mat-checkbox-background {
        background-color: mat-get-color-from-palette($accent);
      }

      &.mat-warn .mat-checkbox-background {
        background-color: mat-get-color-from-palette($warn);
      }
    }

    .mat-checkbox-disabled {
      &.mat-checkbox-checked,
      &.mat-checkbox-indeterminate {
        .mat-checkbox-background {
          background-color: $disabled-color;
        }
      }

      &:not(.mat-checkbox-checked) {
        .mat-checkbox-frame {
          border-color: $disabled-color;
        }
      }

      .mat-checkbox-label {
        color: mat-get-color-from-palette($foreground, disabled);
      }
    }

    // Switch this to a solid color since we're using `opacity`
    // to control how opaque the ripple should be.
    /*.mat-checkbox .mat-ripple {
      background-color: mat-get-color-from-palette($foreground, base);
    }

    .mat-checkbox-checked:not(.mat-checkbox-disabled),
    .mat-checkbox:active:not(.mat-checkbox-disabled) {
      &.mat-primary .mat-ripple {
        background: mat-get-color-from-palette($primary);
      }

      &.mat-accent .mat-ripple {
        background: mat-get-color-from-palette($accent);
      }

      &.mat-warn .mat-ripple {
        background: mat-get-color-from-palette($warn);
      }
    }*/
  }

@mixin theme($theme-name) {

    $light-theme: get-theme-light-variant($theme-name);
    $dark-theme: get-theme-dark-variant($theme-name);

    @at-root [theme="#{$theme-name}"] {
        &[variant="light"] {
            @include color($light-theme);
        }

        @if $dark-theme-selector {
            $mat-css-theme: $dark-theme !global;

            &[variant="dark"] {
                @include color($dark-theme);
            }
        }
    }

}
