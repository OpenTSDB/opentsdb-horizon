/**
 * This file is part of OpenTSDB.
 * Copyright (C) 2021  Yahoo.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// **************************************
// * FUNCTIONS & MIXINS
// * Functions at top
// * Mixins at bottom
// **************************************

// *
// * Functions
// *

// Math
@function power-number($number, $exp) {
    $value: 1;
    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    } @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }
    @return $value;
}

@function round-to-even-number($number) {
    @return floor($number / 2) * 2;
}

// * Units
@function em($pixels, $context: $body-size) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }

    @if (unitless($context)) {
        $context: $context * 1px;
    }

    @return $pixels / $context * 1em;
}

@function remove-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

// * color functions
@function color-luminance($color) {
    $colors: (
        "red": red($color),
        "green": green($color),
        "blue": blue($color)
    );

    @each $name, $value in $colors {
        $adjusted: 0;
        $value: $value / 255;

        @if $value < .03928 {
            $value: $value / 12.92;
        } @else {
            $value: ($value + .055) / 1.055;
            $value: power-number($value, 2.4);
        }
        $colors: map-merge($colors, ($name: $value));
    }
    @return (map-get($colors, "red") * .2126) + (map-get($colors, "green") * .7152) + (map-get($colors, "blue") * .0722);
}

@function find-color-invert($color) {
    @if (color-luminance($color) > .55) {
        @return rgba($black, .95);
    } @else {
        @return rgba($white, .95);
    }
}

// *
// * Mixins
// *

@mixin md-icon-size($size: 24px) {
    font-size: $size;
    height: $size;
    width: $size;
}

%overlay {
    bottom: 0;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
}

@mixin overlay($offset: 0){
    @extend %overlay;
    @if $offset != 0 {
        bottom: $offset;
        left: $offset;
        right: $offset;
        top: $offset;
    }
}

%unselectable {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin unselectable() {
  @extend %unselectable;
}

@mixin mat-input-as-dropdown() {
    .mat-form-field-wrapper .mat-form-field-infix {
        display: flex;
        align-items: baseline;

        .mat-select-arrow-wrapper {
            display: flex;
            align-items: center;
        }
    }
}

@mixin clearfix() {
     &::after{
         clear: both;
         content: " ";
         display: table;
    }
}

%block {
    &:not(:last-child) {
        margin-bottom: 1.5rem;
    }
}

@mixin block() {
    @extend %block;
}

@mixin has-scroller() {
    position: relative;
    overflow: hidden;
}

@mixin is-scroller(){
    @include overlay;
    overflow: overlay;
}

@mixin overflow-touch() {
    -webkit-overflow-scrolling: touch
}

 @mixin opacity ($trans) {
    filter: alpha(opactiy=($trans * 100));
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
    -moz-opacity: $trans;
    -khtml-opacity: $trans;
    opacity: $trans;
}

@mixin base-effects () {
    @include opacity(1);
    @include transition(all .18s ease-out .18s);
}

// * Transitions
@mixin transition ($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin transition-property($args...){
    -webkit-transition-property: $args;
    -moz-transition-property: $args;
    -ms-transition-property: $args;
    -o-transition-property: $args;
    transition-property: $args;
}

@mixin transition-duration($args) {
    -webkit-transition-duration: $args;
    -moz-transition-duration: $args;
    -ms-transition-duration: $args;
    -o-transition-duration: $args;
    transition-duration: $args;
}

@mixin transition-timing-function($args) {
    -webkit-transition-timing-function: $args;
    -moz-transition-timing-function: $args;
    -ms-transition-timing-function: $args;
    -o-transition-timing-function: $args;
    transition-timing-function: $args;
}

@mixin transform ($val) {
    -webkit-transform: $val;
    -moz-transform: $val;
    -ms-transform: $val;
    transform: $val;
}

@mixin transform-origin ($val) {
    -webkit-transform-origin: $val;
    -moz-transform-origin: $val;
    -ms-transform-origin: $val;
    transform-origin: $val;
}

// * GRADIENTS

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
    background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
    background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
    background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
    background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

// * directional gradient, default angle 45deg
//
// Creates two color stops
@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
    background-repeat: repeat-x;
    background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12
    background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}

@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
    background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
    background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
    background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
    background-repeat: no-repeat;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
}

@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
    background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-repeat: no-repeat;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}

@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
    background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
    background-image: radial-gradient(circle, $inner-color, $outer-color);
    background-repeat: no-repeat;
}

@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
    background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
    background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
    background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

// * custom scrollbars
// NOTE: this works primarily in webkit browsers
@mixin scrollbars($track-color: rgba(0, 0, 0, .1), $thumb-color: rgba(0, 0, 0, .4), $width: 10px , $thumb-radius: 4px) {

    &::-webkit-scrollbar {
        &:vertical {
            width: $width;
        }

        &:horizontal {
            height: $width;
        }
    }

    &::-webkit-scrollbar-track {
        background-color: $track-color;
        border-radius: 0;
        padding: 2px;
    }

    &::-webkit-scrollbar-thumb {
        border-radius: $thumb-radius;
        background-color: $thumb-color;
    }
}

// Responsiveness

@mixin from($device) {
    @media screen and (min-width: $device) {
        @content;
    }
}

@mixin until($device) {
    @media screen and (max-width: $device - 1px) {
        @content;
    }
}

@mixin mobile {
    @media screen and (max-width: $tablet - 1px) {
        @content;
    }
}

@mixin tablet {
    @media screen and (min-width: $tablet), print {
        @content;
    }
}

@mixin tablet-only {
    @media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {
        @content;
    }
}

@mixin touch {
    @media screen and (max-width: $desktop - 1px) {
        @content;
    }
}

@mixin desktop {
    @media screen and (min-width: $desktop) {
        @content;
    }
}

@mixin desktop-only {
    @if $widescreen-enabled {
        @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px) {
            @content;
        }
    }
}

@mixin until-widescreen {
    @if $widescreen-enabled {
        @media screen and (max-width: $widescreen - 1px) {
            @content;
        }
    }
}

@mixin widescreen {
    @if $widescreen-enabled {
        @media screen and (min-width: $widescreen) {
            @content;
        }
    }
}

@mixin widescreen-only {
    @if $widescreen-enabled and $fullhd-enabled {
        @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px) {
            @content;
        }
    }
}

@mixin until-fullhd {
    @if $fullhd-enabled {
        @media screen and (max-width: $fullhd - 1px) {
            @content;
        }
    }
}

@mixin fullhd {
    @if $fullhd-enabled {
        @media screen and (min-width: $fullhd) {
            @content;
        }
    }
}

@mixin sizeDenaliIcon($size: 24px) {
    width: $size;
    height: $size;
    line-height: $size;
    font-size: $size;
}

// * for debugging sass maps
@mixin debug-map($map) {
    @at-root {
        @debug-map {
            __toString__: inspect($map);
            __length__: length($map);
            __depth__: depth($map);
            __keys__: map-keys($map);
            __properties__ {
                @each $key, $value in $map {
                    #{'(' + type-of($value) + ') ' + $key}: inspect($value);
                }
            }
        }
    }
}
